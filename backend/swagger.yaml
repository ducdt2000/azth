basePath: /api/v1
definitions:
  domain.JSONMap:
    additionalProperties: true
    type: object
  domain.TenantStatus:
    enum:
    - active
    - inactive
    - suspended
    - trial
    - deleted
    type: string
    x-enum-varnames:
    - TenantStatusActive
    - TenantStatusInactive
    - TenantStatusSuspended
    - TenantStatusTrial
    - TenantStatusDeleted
  domain.UserStatus:
    enum:
    - active
    - inactive
    - suspended
    - pending
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusSuspended
    - UserStatusPending
  dto.BulkOperationResult:
    properties:
      error:
        example: Tenant not found
        type: string
      success:
        example: true
        type: boolean
      tenant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  dto.BulkTenantRequest:
    properties:
      action:
        enum:
        - activate
        - deactivate
        - suspend
        - delete
        example: activate
        type: string
      tenant_ids:
        example:
        - '["550e8400-e29b-41d4-a716-446655440001"]'
        items:
          type: string
        minItems: 1
        type: array
    required:
    - action
    - tenant_ids
    type: object
  dto.ConfirmPasswordResetRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      tenant_id:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.ConfirmPasswordResetResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.CreateTenantRequest:
    properties:
      domain:
        example: acme.com
        type: string
      logo_url:
        example: https://example.com/logo.png
        type: string
      max_users:
        example: 100
        minimum: 1
        type: integer
      metadata:
        additionalProperties: true
        type: object
      name:
        example: Acme Corporation
        maxLength: 100
        minLength: 1
        type: string
      plan:
        enum:
        - free
        - pro
        - enterprise
        example: enterprise
        type: string
      primary_color:
        example: '#007bff'
        type: string
      secondary_color:
        example: '#6c757d'
        type: string
      settings:
        additionalProperties: true
        type: object
      slug:
        example: acme-corp
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    - plan
    - slug
    type: object
  dto.CreateUserRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 100
        minLength: 1
        type: string
      metadata:
        additionalProperties: true
        type: object
      password:
        example: SecurePassword123!
        minLength: 8
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      username:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      mfa_code:
        type: string
      password:
        minLength: 8
        type: string
      remember:
        type: boolean
      tenant_id:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      requires_mfa:
        type: boolean
      session:
        allOf:
        - $ref: '#/definitions/dto.SessionInfo'
        description: Only for stateful mode
      token_type:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.LogoutRequest:
    properties:
      all:
        description: If true, logout from all sessions
        type: boolean
    type: object
  dto.MFASetupResponse:
    properties:
      backup_codes:
        items:
          type: string
        type: array
      qr_code_url:
        type: string
      secret:
        type: string
    type: object
  dto.MFAValidateRequest:
    properties:
      code:
        type: string
      user_id:
        type: string
    required:
    - code
    - user_id
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  dto.RequestPasswordResetRequest:
    properties:
      email:
        type: string
      tenant_id:
        type: string
    required:
    - email
    type: object
  dto.RequestPasswordResetResponse:
    properties:
      message:
        type: string
      token_sent:
        type: boolean
    type: object
  dto.SessionInfo:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      last_activity:
        type: string
      user_agent:
        type: string
    type: object
  dto.TenantListResponse:
    properties:
      pagination:
        $ref: '#/definitions/github_com_ducdt2000_azth_backend_internal_modules_tenant_dto.PaginationResponse'
      tenants:
        items:
          $ref: '#/definitions/dto.TenantResponse'
        type: array
    type: object
  dto.TenantResponse:
    properties:
      created_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      current_users:
        example: 45
        type: integer
      domain:
        example: acme.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      logo_url:
        example: https://example.com/logo.png
        type: string
      max_users:
        example: 100
        type: integer
      metadata:
        $ref: '#/definitions/domain.JSONMap'
      name:
        example: Acme Corporation
        type: string
      plan:
        example: enterprise
        type: string
      primary_color:
        example: '#007bff'
        type: string
      secondary_color:
        example: '#6c757d'
        type: string
      settings:
        $ref: '#/definitions/domain.JSONMap'
      slug:
        example: acme-corp
        type: string
      status:
        allOf:
        - $ref: '#/definitions/domain.TenantStatus'
        example: active
      updated_at:
        example: "2023-12-01T08:15:30Z"
        type: string
    type: object
  dto.UpdatePasswordRequest:
    properties:
      current_password:
        description: Optional if admin is updating
        type: string
      mfa_code:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - new_password
    type: object
  dto.UpdatePasswordResponse:
    properties:
      message:
        type: string
      requires_mfa:
        type: boolean
      sessions_revoked:
        type: boolean
      success:
        type: boolean
    type: object
  dto.UpdateTenantRequest:
    properties:
      domain:
        example: acme.com
        type: string
      logo_url:
        example: https://example.com/logo.png
        type: string
      max_users:
        example: 100
        minimum: 1
        type: integer
      metadata:
        additionalProperties: true
        type: object
      name:
        example: Acme Corporation
        maxLength: 100
        minLength: 1
        type: string
      plan:
        enum:
        - free
        - pro
        - enterprise
        example: enterprise
        type: string
      primary_color:
        example: '#007bff'
        type: string
      secondary_color:
        example: '#6c757d'
        type: string
      settings:
        additionalProperties: true
        type: object
      status:
        enum:
        - active
        - inactive
        - suspended
        - trial
        example: active
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 100
        minLength: 1
        type: string
      metadata:
        additionalProperties: true
        type: object
      phone_number:
        example: "+1234567890"
        type: string
      status:
        enum:
        - active
        - inactive
        - suspended
        - pending
        example: active
        type: string
      username:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserInfo:
    properties:
      avatar:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      mfa_enabled:
        type: boolean
      status:
        type: string
      tenant_id:
        type: string
      username:
        type: string
    type: object
  dto.UserListResponse:
    properties:
      pagination:
        $ref: '#/definitions/github_com_ducdt2000_azth_backend_internal_modules_user_dto.PaginationResponse'
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserResponse:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      email_verified:
        example: true
        type: boolean
      email_verified_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_login_at:
        example: "2023-12-01T08:15:30Z"
        type: string
      last_name:
        example: Doe
        type: string
      metadata:
        $ref: '#/definitions/domain.JSONMap'
      mfa_enabled:
        example: false
        type: boolean
      password_changed_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      phone_verified:
        example: false
        type: boolean
      phone_verified_at:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/domain.UserStatus'
        example: active
      tenant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      updated_at:
        example: "2023-12-01T08:15:30Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  github_com_ducdt2000_azth_backend_internal_modules_tenant_dto.BulkOperationResponse:
    properties:
      error_count:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkOperationResult'
        type: array
      success_count:
        example: 5
        type: integer
      total_processed:
        example: 6
        type: integer
    type: object
  github_com_ducdt2000_azth_backend_internal_modules_tenant_dto.PaginationResponse:
    properties:
      limit:
        example: 20
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 150
        type: integer
      total_pages:
        example: 8
        type: integer
    type: object
  github_com_ducdt2000_azth_backend_internal_modules_user_dto.PaginationResponse:
    properties:
      limit:
        example: 20
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 150
        type: integer
      total_pages:
        example: 8
        type: integer
    type: object
  response.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details: {}
      message:
        example: Invalid input data
        type: string
    type: object
  response.Meta:
    properties:
      pagination: {}
      request_id:
        example: req-123456
        type: string
      version:
        example: v1
        type: string
    type: object
  response.Response:
    properties:
      code:
        example: SUCCESS
        type: string
      data: {}
      error:
        $ref: '#/definitions/response.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        example: true
        type: boolean
      timestamp:
        example: 1640995200
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@ducdt.dev
    name: API Support
    url: http://azth.ducdt.dev/support
  description: Multi-tenant SSO and OIDC server with user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://azth.ducdt.dev/terms/
  title: AZTH SSO & OIDC Server API
  version: "1.0"
paths:
  /api/v1/auth/password/reset/confirm:
    post:
      consumes:
      - application/json
      description: Confirms a password reset using the provided token and sets a new
        password
      parameters:
      - description: Password reset confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ConfirmPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConfirmPasswordResetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Confirm password reset
      tags:
      - Authentication
  /api/v1/auth/password/reset/request:
    post:
      consumes:
      - application/json
      description: Initiates a password reset process by sending a reset code to the
        user's email
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RequestPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RequestPasswordResetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Request password reset
      tags:
      - Authentication
  /api/v1/auth/password/update:
    put:
      consumes:
      - application/json
      description: Updates the password for an authenticated user
      parameters:
      - description: Password update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdatePasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: MFA required
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update password
      tags:
      - Authentication
  /api/v1/tenants:
    get:
      consumes:
      - application/json
      description: List tenants with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - created_at
        - updated_at
        - name
        - slug
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by status
        enum:
        - active
        - inactive
        - suspended
        - trial
        in: query
        name: status
        type: string
      - description: Filter by plan
        enum:
        - free
        - pro
        - enterprise
        in: query
        name: plan
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenants retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantListResponse'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: List tenants
      tags:
      - Tenants
    post:
      consumes:
      - application/json
      description: Create a new tenant organization
      parameters:
      - description: Tenant creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTenantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tenant created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "409":
          description: Slug or domain already exists
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new tenant
      tags:
      - Tenants
  /api/v1/tenants/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a tenant
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Deletion reason
        in: query
        name: reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid tenant ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Delete tenant
      tags:
      - Tenants
    get:
      consumes:
      - application/json
      description: Retrieve a tenant by their unique identifier
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid tenant ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Get tenant by ID
      tags:
      - Tenants
    put:
      consumes:
      - application/json
      description: Update an existing tenant's information
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Tenant update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tenant updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "409":
          description: Domain already exists
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Update tenant
      tags:
      - Tenants
  /api/v1/tenants/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a tenant
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Activation reason
        in: query
        name: reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant activated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid tenant ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Activate tenant
      tags:
      - Tenants
  /api/v1/tenants/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate a tenant
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Deactivation reason
        in: query
        name: reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid tenant ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Deactivate tenant
      tags:
      - Tenants
  /api/v1/tenants/{id}/suspend:
    post:
      consumes:
      - application/json
      description: Suspend a tenant
      parameters:
      - description: Tenant ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Suspension reason
        in: query
        name: reason
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant suspended successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "400":
          description: Invalid tenant ID or missing reason
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Suspend tenant
      tags:
      - Tenants
  /api/v1/tenants/bulk:
    post:
      consumes:
      - application/json
      description: Perform bulk operations on multiple tenants
      parameters:
      - description: Bulk operation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk operation completed
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_ducdt2000_azth_backend_internal_modules_tenant_dto.BulkOperationResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Bulk update tenants
      tags:
      - Tenants
  /api/v1/tenants/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a tenant by their unique slug identifier
      parameters:
      - description: Tenant slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tenant retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TenantResponse'
              type: object
        "404":
          description: Tenant not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Get tenant by slug
      tags:
      - Tenants
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: List users with pagination
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "409":
          description: Email or username already exists
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "409":
          description: Email or username already exists
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "423":
          description: Account locked
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and revoke session
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/mfa/backup-codes:
    post:
      description: Generate new backup codes for MFA
      produces:
      - application/json
      responses:
        "200":
          description: Backup codes generated
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Generate backup codes
      tags:
      - auth
  /auth/mfa/disable:
    delete:
      description: Disable multi-factor authentication for the user
      responses:
        "200":
          description: MFA disabled successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Disable MFA
      tags:
      - auth
  /auth/mfa/enable:
    post:
      description: Enable multi-factor authentication for the user
      produces:
      - application/json
      responses:
        "200":
          description: MFA enabled successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MFASetupResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Enable MFA
      tags:
      - auth
  /auth/mfa/validate:
    post:
      consumes:
      - application/json
      description: Validate multi-factor authentication code
      parameters:
      - description: MFA validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MFAValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA validation result
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: boolean
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Validate MFA code
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired access token using refresh token
      parameters:
      - description: Refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RefreshResponse'
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "401":
          description: Invalid refresh token
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/sessions:
    delete:
      description: Logout user from all active sessions
      responses:
        "200":
          description: Logged out from all sessions
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Logout from all sessions
      tags:
      - auth
    get:
      description: Get all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Sessions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SessionInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Get user sessions
      tags:
      - auth
  /auth/sessions/{id}:
    delete:
      description: Revoke a specific user session by ID
      parameters:
      - description: Session ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Session revoked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid session ID
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "404":
          description: Session not found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  $ref: '#/definitions/response.ErrorInfo'
              type: object
      security:
      - BearerAuth: []
      summary: Revoke session
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
